#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Feb 17 22:49:31 2018

@author: archana
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
dataset = pd.read_csv("/home/archana/Downloads/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/processed.cleveland.csv", header=None)
#To replace the missing values with NaN
dataset[[10,11,12,13]]=dataset[[10,11,12,13]].replace('?',np.NaN)
#Split the dataset to independent and dependent variables
X = dataset.iloc[:,:-1].values
Y = dataset.iloc[:,-1].values
#replace the NaN values with the most repeating value             
from sklearn.preprocessing import Imputer
imputer = Imputer(missing_values = np.NaN, strategy = 'most_frequent', axis = 0)
X = imputer.fit_transform(X)
#split the dataset to test set and training set
from sklearn.cross_validation import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state = 0)
#scale the attribute values in order to improve accuracy
from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)

#use KNNeighbor
from sklearn.neighbors import KNeighborsClassifier
kmodel = KNeighborsClassifier(n_neighbors=8)
kmodel.fit(X_train, Y_train)
y_pred = kmodel.predict(X_test)

#check accuracy
from sklearn.metrics import accuracy_score 
accuracy = accuracy_score(Y_test,y_pred)




